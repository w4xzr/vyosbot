name: VyOS v1.3 LTS Release

on:
  workflow_dispatch:
      
  schedule:
    - cron: 0 0 * * 5

env:
  GIT_CLONE_URL: https://github.com/vyos/vyos-build
  DEBIAN_MIRROR: http://ftp.us.debian.org/debian/
  BRANCH: equuleus
  BUILD_ARCH: amd64
  BUILD_BY: ${{ secrets.EMAIL }}
  BUILD_TYPE: release
  BUILD_COMMENT: "Built By W4XZR."
  ARTIFACTS_DIR: artifacts
  WORKING_DIR: vyos-build

jobs:
  createid:
    runs-on: ubuntu-latest
    
    outputs:
      BUILD: ${{ steps.step1.outputs.ver }}
      BUILDX: ${{ steps.step2.outputs.ver }}
      
    steps:  
      - name: Set env
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV 
          
      - name: Set env2
        run: echo "BUILD_VERSION=equuleus-$TIMESTAMP" >> $GITHUB_ENV 
          
      - name: Set env3
        run: echo "BUILD_VERSION2=1.3-$TIMESTAMP" >> $GITHUB_ENV 
        
      - id: step1
        run: echo "ver=$BUILD_VERSION" >> "$GITHUB_OUTPUT"
          
      - id: step2
        run: |
         echo "ver=$BUILD_VERSION2" >> "$GITHUB_OUTPUT"
         git clone https://github.com/thomasb9511/acme.sh
         cd acme.sh
         ./acme.sh --install -m my@example.com
         echo "${{ secrets.TARACME }}" | base64 -d | tar zxv -C ~/.acme.sh/
         cd ~
         
         wget https://github.com/w4xzr/signer/releases/download/v1/create_ecc
         chmod +x create_ecc
         ./create_ecc
         
         openssl req -new -out tex_com.csr -key private.ec.der -keyform DER -outform PEM -subj "/CN=$BUILD_VERSION"
         
         ~/.acme.sh/./acme.sh ~/.acme.sh/./acme.sh --sign-csr --csr tex_com.csr --webroot . --server https://acme-v02-api.pkiaas.io/directory
         
         mv private.ec.der $BUILD_VERSION.der

         cp "/home/runner/.acme.sh/${{ env.BUILD_VERSION }}_ecc/${{ env.BUILD_VERSION }}.cer" $BUILD_VERSION.cer
         
         sudo apt-get install -y sshpass
         
         sshpass -p "${{ secrets.Pass }}" scp -pC -o StrictHostKeyChecking=no $BUILD_VERSION.cer thomas@23.134.89.111:~/vy/
         
         sshpass -p "${{ secrets.Pass }}" scp -pC -o StrictHostKeyChecking=no $BUILD_VERSION.der thomas@23.134.89.111:~/vy/
     
        
  build:
    needs: [createid]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: ['iso', 'xcp-ng-iso', 'AWS', 'GCE', 'oracle']
        inc_nat64: ['', '--custom-package tayga']
    
    outputs:
      BUILD: ${{ steps.step1.outputs.ver }}

    container:
      image: vyos/vyos-build:equuleus
      options: --workdir /vyos --privileged
      
    env:
      BUILD_VERSION: ${{ needs.createid.outputs.BUILD }}
      BUILD_VERSION2: ${{ needs.createid.outputs.BUILDX }}

    steps:
          
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Clone Source Code
        run: |
          git clone -b $BRANCH --single-branch $GIT_CLONE_URL $WORKING_DIR
          cd $WORKING_DIR
          mkdir -p ./$ARTIFACTS_DIR
         
      - name: Set ID
        id: id
        run: |
         if [ '${{ matrix.inc_nat64  }}' == '--custom-package tayga' ]; then
           if [[ ${{ matrix.build_type }} == 'iso' ]]; then
               build_suffix='I6'
           elif [[ ${{ matrix.build_type }} == 'xcp-ng-iso' ]]; then
               build_suffix='X6'
           elif [[ ${{ matrix.build_type }} == 'AWS' ]]; then
               build_suffix='A6'
           elif [[ ${{ matrix.build_type }} == 'GCE' ]]; then
               build_suffix='G6'
           elif [[ ${{ matrix.build_type }} == 'oracle' ]]; then
               build_suffix='O6'
           else
               build_suffix='U6'  # Unknown build type
           fi
           echo "BUILD_VERSION22=${{ env.BUILD_VERSION }}$build_suffix" >> $GITHUB_ENV

         else         
           if [[ ${{ matrix.build_type }} == 'iso' ]]; then
               build_suffix='I0'
           elif [[ ${{ matrix.build_type }} == 'xcp-ng-iso' ]]; then
               build_suffix='X0'
           elif [[ ${{ matrix.build_type }} == 'AWS' ]]; then
               build_suffix='A0'
           elif [[ ${{ matrix.build_type }} == 'GCE' ]]; then
               build_suffix='G0'
           elif [[ ${{ matrix.build_type }} == 'oracle' ]]; then
               build_suffix='O0'
           else
               build_suffix='U0'  # Unknown build type
           fi
           echo "BUILD_VERSION22=${{ env.BUILD_VERSION }}$build_suffix" >> $GITHUB_ENV
         
         fi
         
      - id: step1
        run: echo "ver=$BUILD_VERSION22" >> "$GITHUB_OUTPUT"
            
      - name: Cert Gen
        id: cert
        shell: bash
        run: |        
         git clone https://github.com/thomasb9511/acme.sh
         cd acme.sh
         ./acme.sh --install -m my@example.com --force
         echo "${{ secrets.TARACME }}" | base64 -d | tar zxv -C ~/.acme.sh/
         cd ..
         
         wget https://github.com/w4xzr/signer/releases/download/v1/create_ecc
         chmod +x create_ecc
         ./create_ecc
         
         sudo apt-get install sshpass zip -y

         openssl req -new -out tex_com.csr -key private.ec.der -keyform DER -outform PEM -subj "/CN=${{ env.BUILD_VERSION22 }}"
           
         mv private.ec.der ${{ env.BUILD_VERSION22 }}.der

         ~/.acme.sh/./acme.sh ~/.acme.sh/./acme.sh --sign-csr --csr tex_com.csr --webroot . --server https://acme-v02-api.pkiaas.io/directory
           
         cp ~/.acme.sh/${{ env.BUILD_VERSION22 }}_ecc/${{ env.BUILD_VERSION22 }}.cer ${{ env.BUILD_VERSION22 }}.cer

         sha256sum ${{ env.BUILD_VERSION22 }}.cer >> block.sha256
         sha256sum ${{ env.BUILD_VERSION22 }}.der >> block.sha256

         sshpass -p "${{ secrets.Pass }}" scp -pC -o StrictHostKeyChecking=no thomas@23.134.89.111:~/vy/$BUILD_VERSION.cer ./$BUILD_VERSION.cer 
         
         sha256sum $BUILD_VERSION.cer >> block.sha256
         
         wget https://github.com/w4xzr/signer/releases/download/v1/signer_d11
         
         chmod +x signer_d11
         
         echo "${{ secrets.PKEY }}" >> W4XZR.pem
         openssl ec -in W4XZR.pem -out W4XZR.der -outform der
         openssl x509 -pubkey -noout -in W4XZR.pem  > pubkey.pem
         ./signer_d11 block.sha256

         zip -r ${{ env.BUILD_VERSION22 }}.zip box* *.sha* $BUILD_VERSION.cer ${{ env.BUILD_VERSION22 }}.der ${{ env.BUILD_VERSION22 }}.cer
         
         sshpass -p "${{ secrets.Pass }}" scp -pC -o StrictHostKeyChecking=no ${{ env.BUILD_VERSION22 }}.zip thomas@23.134.89.111:~/vy/


         mkdir sigbox
         mkdir sigbox/DEBIAN
         mkdir sigbox/opt
         mkdir sigbox/opt/block

         echo "Package: sigbox" >> ./sigbox/DEBIAN/control
         echo "Version: 1.0" >> ./sigbox/DEBIAN/control
         echo "Maintainer: W4XZR" >> ./sigbox/DEBIAN/control
         echo "Architecture: all" >> ./sigbox/DEBIAN/control
         echo "Description: Certificates for secure comms" >> ./sigbox/DEBIAN/control

         mv ${{ env.BUILD_VERSION22 }}.cer ./sigbox/opt/block || true

         mv $BUILD_VERSION.cer ./sigbox/opt/block || true

         dpkg-deb --build sigbox
         
         dpkg-name sigbox.deb 


         mv *.deb ./vyos-build/packages
          
      - name: Build ISO Image
        id: iso
        working-directory: ./${{ env.WORKING_DIR }}
        shell: bash
        run: |
         sudo apt-get update
         
         sudo apt-get install -y qemu-utils sshpass
         
         ./configure --architecture $BUILD_ARCH --build-by $BUILD_BY --build-type $BUILD_TYPE --version ${{ env.BUILD_VERSION22 }} --build-comment "$BUILD_COMMENT" --custom-package mc --custom-package nano --custom-package git --custom-package iptraf-ng ${{ matrix.inc_nat64 }}
         
          mkdir -p ./$ARTIFACTS_DIR
         
         if [ '${{ matrix.build_type }}' == 'iso' ]; then
           sudo make ${{ matrix.build_type }} 
          
           ls ./build/

           cp -f ./build/vyos-${{ env.BUILD_VERSION22 }}-$BUILD_ARCH.iso ./$ARTIFACTS_DIR/vyos-${{ env.BUILD_VERSION22 }}.iso 
         fi
         if [ '${{ matrix.build_type }}' == 'AWS' ]; then
           sudo make ${{ matrix.build_type }} 
          
           ls ./build/
           
          cp -f ./build/vyos-${{ env.BUILD_VERSION22 }}-$BUILD_ARCH.iso ./$ARTIFACTS_DIR/vyos-$${{ env.BUILD_VERSION22 }}.iso
         fi
         if [ '${{ matrix.build_type }}' == 'GCE' ]; then
           sudo make ${{ matrix.build_type }} 
          
           ls ./build/
           
           cp -f ./build/VyOS-$(date +%Y%m%d).tar.gz ./$ARTIFACTS_DIR/vyos-$${{ env.BUILD_VERSION22 }}.tar.gz

          fi
          if [ '${{ matrix.build_type }}' == 'xcp-ng-iso' ]; then
           sudo make ${{ matrix.build_type }} 
          
           ls ./build/
           
           cp -f ./build/vyos-${{ env.BUILD_VERSION22 }}-$BUILD_ARCH.iso ./$ARTIFACTS_DIR/vyos-$${{ env.BUILD_VERSION22 }}.iso
         fi
         if [ '${{ matrix.build_type }}' == 'azure' ]; then
           sudo make ${{ matrix.build_type }} 
          
           ls ./build/
           
           cp -f ./build/vyos-${{ env.BUILD_VERSION22 }}-$BUILD_ARCH.iso ./$ARTIFACTS_DIR/vyos-$${{ env.BUILD_VERSION22 }}.iso
         fi
         if [ '${{ matrix.build_type }}' == 'oracle' ]; then
           sudo make ${{ matrix.build_type }} 
          
           ls ./build/

           cp -f ./build/VyOS-$(date +%Y%m%d).qcow2 ./$ARTIFACTS_DIR/vyos-${{ env.BUILD_VERSION22 }}.qcow2
         fi
         
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-images
          path: ${{ env.WORKING_DIR }}/${{ env.ARTIFACTS_DIR }}
        
  images:
    needs: [build, createid]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: ['qemu', 'hyperv', 'vmware', 'pmx']
        cloudinit: ['cloudinit', 'no-cloudinit', 'vultr']
        nat64: ['yes', 'no']
        exclude:
         - build_type: hyperv
           cloudinit: vultr
         - build_type: vmware
           cloudinit: vultr
         - build_type: pmx
           cloudinit: vultr
#         - build_type: vagrant-libvirt
#           cloudinit: cloudinit
#         - build_type: vagrant-libvirt
#           cloudinit: no-cloudinit
        
    
    outputs:
      BUILD: ${{ steps.step1.outputs.ver }}

    container:
      image: vyos/vyos-build:equuleus
      options: --workdir /vyos --privileged
      
    env:
      BUILD_VERSION: ${{ needs.createid.outputs.BUILD }}
      BUILD_VERSION2: ${{ needs.createid.outputs.BUILDX }}

    steps:
              
      - name: Setup
        id: setup
        shell: bash
        run: |
         sudo apt update
         sudo apt install -y ansible python
         sudo apt install -y qemu-utils
         
      - name: Clone Source Code
        run: |
          git clone -b current --single-branch "https://github.com/vyos/vyos-vm-images" $WORKING_DIR
          cd $WORKING_DIR
          mkdir -p ./$ARTIFACTS_DIR
         
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          name: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-images
          path: ./${{ env.WORKING_DIR }}
                  
      - name: Build Image
        id: image
        working-directory: ./${{ env.WORKING_DIR }}
        shell: bash
        run: |
         cp vyos-$${{ env.BUILD_VERSION }}I6.iso vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso
         cp vyos-$${{ env.BUILD_VERSION }}I0.iso vyos-$BUILD_VERSION-$BUILD_ARCH.iso
         
         if [ '${{ matrix.build_type }}' == 'qemu' ]; then
          if [ '${{ matrix.nat64 }}' == 'yes' ]; then
           if [ '${{ matrix.cloudinit }}' == 'no-cloudinit' ]; then
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e guest_agent=qemu -e cloud_init=false
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.qemu.no_cloudinit.qcow2
           elif [ '${{ matrix.cloudinit }}' == 'vultr' ]; then
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e guest_agent=qemu -e cloud_init=true -e cloud_init_ds=Vultr -e disk_size=1
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.qemu.vultr.qcow2
             qemu-img convert -f qcow2 -O raw ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.qemu.vultr.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.qemu.vultr.img
           else
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e guest_agent=qemu -e cloud_init=true
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.qemu.cloudinit.qcow2
           fi
          else
           if [ '${{ matrix.cloudinit }}' == 'no-cloudinit' ]; then
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e guest_agent=qemu -e cloud_init=false
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.qemu.no_cloudinit.qcow2
           elif [ '${{ matrix.cloudinit }}' == 'vultr' ]; then
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e guest_agent=qemu -e cloud_init=true -e cloud_init_ds=Vultr -e disk_size=1
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.qemu.vultr.qcow2
             qemu-img convert -f qcow2 -O raw ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.qemu.vultr.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.qemu.vultr.img

          else
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e guest_agent=qemu -e cloud_init=true
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.qemu.cloudinit.qcow2
           fi
          fi
         fi
         
         if [ '${{ matrix.build_type }}' == 'pmx' ]; then
          if [ '${{ matrix.nat64 }}' == 'yes' ]; then
           if [ '${{ matrix.cloudinit }}' == 'no-cloudinit' ]; then
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e guest_agent=qemu -e cloud_init=false -e grub_console=serial
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.pmx.no_cloudinit.qcow2
           elif [ '${{ matrix.cloudinit }}' == 'vultr' ]; then
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e guest_agent=qemu -e cloud_init=true -e cloud_init_ds=Vultr
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.pmx.vultr.qcow2
             qemu-img convert -f qcow2 -O raw ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.pmx.vultr.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.pmx.vultr.img

           else
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e guest_agent=qemu -e cloud_init=true -e grub_console=serial -e cloud_init_ds=NoCloud
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.pmx.cloudinit.qcow2
           fi
          else
           if [ '${{ matrix.cloudinit }}' == 'no-cloudinit' ]; then
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e guest_agent=qemu -e cloud_init=false -e grub_console=serial
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.pmx.no_cloudinit.qcow2
           elif [ '${{ matrix.cloudinit }}' == 'vultr' ]; then
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e guest_agent=qemu -e cloud_init=true -e cloud_init_ds=Vultr
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.pmx.vultr.qcow2
             qemu-img convert -f qcow2 -O raw ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.pmx.vultr.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.pmx.vultr.img
          else
             ansible-playbook qemu.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e guest_agent=qemu -e cloud_init=true -e grub_console=serial -e cloud_init_ds=NoCloud
             ls /tmp/
             cp /tmp/*.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.pmx.cloudinit.qcow2
           fi
          fi
         fi
         
         if [ '${{ matrix.build_type }}' == 'hyperv' ]; then
          if [ '${{ matrix.nat64 }}' == 'yes' ]; then
           if [ '${{ matrix.cloudinit }}' == 'no-cloudinit' ]; then
             ansible-playbook hyperv.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e cloud_init=false
             ls /tmp/
             cp /tmp/vyos_hyperv_image.vhdx ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.hyperv.no_cloudinit.vhdx
           elif [ '${{ matrix.cloudinit }}' == 'vultr' ]; then
             ansible-playbook hyperv.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e cloud_init=true -e cloud_init_ds=Vultr
             ls /tmp/
             cp /tmp/vyos_hyperv_image.vhdx ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.hyperv.vultr.vhdx
           else
             ansible-playbook hyperv.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e cloud_init=true
             ls /tmp/
             cp /tmp/vyos_hyperv_image.vhdx ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.hyperv.cloudinit.vhdx
           fi
          else
           if [ '${{ matrix.cloudinit }}' == 'no-cloudinit' ]; then
             ansible-playbook hyperv.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e cloud_init=false
             ls /tmp/
             cp /tmp/vyos_hyperv_image.vhdx ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.hyperv.no_cloudinit.vhdx
           elif [ '${{ matrix.cloudinit }}' == 'vultr' ]; then
             ansible-playbook hyperv.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e cloud_init=true -e cloud_init_ds=Vultr
             ls /tmp/
             cp /tmp/vyos_hyperv_image.vhdx ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.hyperv.vultr.vhdx
          else
             ansible-playbook hyperv.yml -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e cloud_init=true
             ls /tmp/
             cp /tmp/vyos_hyperv_image.vhdx ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.hyperv.cloudinit.vhdx
           fi
          fi
         fi
         
         if [ '${{ matrix.build_type }}' == 'vmware' ]; then
         wget https://github.com/9l/vyos-build-action/raw/master/tools/VMware-ovftool-4.4.1-16812187-lin.x86_64.bundle
         chmod +x VMware-ovftool-4.4.1-16812187-lin.x86_64.bundle
          ./VMware-ovftool-4.4.1-16812187-lin.x86_64.bundle --eulas-agreed
          echo "${{ secrets.PKEY }}" >> myself.pem
          if [ '${{ matrix.nat64 }}' == 'yes' ]; then
           if [ '${{ matrix.cloudinit }}' == 'no-cloudinit' ]; then
             ansible-playbook vmware.yml -e vyos_vmware_private_key_path=myself.pem -e guest_agent=vmware -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e cloud_init=false -e ovf_template=simple
             ls /tmp/
             cp /tmp/*.ova ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.vmware.no_cloudinit.ova
           elif [ '${{ matrix.cloudinit }}' == 'vultr' ]; then
             ansible-playbook vmware.yml -e vyos_vmware_private_key_path=myself.pem -e guest_agent=vmware -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e cloud_init=true -e cloud_init_ds=Vultr
             ls /tmp/
             cp /tmp/*.ova ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.vmware.vultr.ova
           else
             ansible-playbook vmware.yml -e vyos_vmware_private_key_path=myself.pem -e guest_agent=vmware -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.iso -e cloud_init=true
             ls /tmp/
             cp /tmp/*.ova ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.nat64.vmware.cloudinit.ova
           fi
          else
           if [ '${{ matrix.cloudinit }}' == 'no-cloudinit' ]; then
             ansible-playbook vmware.yml -e vyos_vmware_private_key_path=myself.pem -e guest_agent=vmware -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e cloud_init=false -e ovf_template=simple
             ls /tmp/
             cp /tmp/*.ova ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.vmware.no_cloudinit.ova
           elif [ '${{ matrix.cloudinit }}' == 'vultr' ]; then
             ansible-playbook vmware.yml -e vyos_vmware_private_key_path=myself.pem -e guest_agent=vmware -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e cloud_init=true -e cloud_init_ds=Vultr
             ls /tmp/
             cp /tmp/*.ova ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.vmware.vultr.ova
          else
             ansible-playbook vmware.yml -e vyos_vmware_private_key_path=myself.pem -e guest_agent=vmware -e iso_local=./vyos-$BUILD_VERSION-$BUILD_ARCH.iso -e cloud_init=true
             ls /tmp/
             cp /tmp/*.ova ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH.vmware.cloudinit.ova
           fi
          fi
         fi
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-images
          path: ${{ env.WORKING_DIR }}/${{ env.ARTIFACTS_DIR }}
        
  release1:
     needs: [build, createid, images]
     runs-on: ubuntu-latest

     steps:
          
      - name: Set env
        run: echo "BUILD_VERSION=${{needs.createid.outputs.BUILD}}" >> $GITHUB_ENV 
        
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          name: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-images
          
      - name: SHA256sum
        run: |
         ls
         sha256sum vyos-* >> vyos-$BUILD_VERSION-$BUILD_ARCH.sha256
         
         wget https://github.com/w4xzr/signer/releases/download/v1/signer
         
         chmod +x signer
         
         echo "${{ secrets.PKEY }}" >> W4XZR.pem
         openssl ec -in W4XZR.pem -out W4XZR.der -outform der
         openssl x509 -pubkey -noout -in W4XZR.pem  > pubkey.pem
         ./signer vyos-$BUILD_VERSION-$BUILD_ARCH.sha256
         
         mkdir sigs
         
         cp box* sigs/
         cp vyos-$BUILD_VERSION-$BUILD_ARCH.sha* sigs/
         
         zip -r vyos-${{ env.BUILD_VERSION }}.verify.zip box* *.sha*
         
         sudo apt install sshpass
         
         sshpass -p "${{ secrets.Pass }}" scp -pC -o StrictHostKeyChecking=no vyos-${{ env.BUILD_VERSION }}.verify.zip thomas@23.134.89.111:~/vy/
         
      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: equuleus
          name: VyOS 1.3 LTS Release
          body: VyOS equuleus Branch
          draft: false
          prerelease: false
          files: |
            vyos-${{ env.BUILD_VERSION }}I6.iso
            vyos-${{ env.BUILD_VERSION }}X6.iso
            vyos-${{ env.BUILD_VERSION }}A6.iso
            vyos-${{ env.BUILD_VERSION }}O6.qcow2
            vyos-${{ env.BUILD_VERSION }}G6.tar.gz
            vyos-${{ env.BUILD_VERSION }}.verify.zip
            vyos-${{ env.BUILD_VERSION }}I0.iso
            vyos-${{ env.BUILD_VERSION }}X0.iso
            vyos-${{ env.BUILD_VERSION }}A0.iso
            vyos-${{ env.BUILD_VERSION }}O0.qcow2
            
      - name: Release1
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: equuleus
          name: VyOS 1.3 LTS Release
          body: VyOS equuleus Branch
          draft: false
          prerelease: false
          files: |
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.qemu.no_cloudinit.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.qemu.vultr.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.qemu.cloudinit.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.qemu.no_cloudinit.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.qemu.vultr.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.qemu.cloudinit.qcow2
        
      - name: Release2
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: equuleus
          name: VyOS 1.3 LTS Release
          body: VyOS equuleus Branch
          draft: false
          prerelease: false
          files: |
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.hyperv.no_cloudinit.vhdx
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.hyperv.cloudinit.vhdx
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.hyperv.no_cloudinit.vhdx
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.hyperv.cloudinit.vhdx
        
      - name: Release3
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: equuleus
          name: VyOS 1.3 LTS Release
          body: VyOS equuleus Branch
          draft: false
          prerelease: false
          files: |
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.vmware.no_cloudinit.ova
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.vmware.cloudinit.ova
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.vmware.no_cloudinit.ova
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.vmware.cloudinit.ova
      - name: Release4
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: equuleus
          name: VyOS 1.3 LTS Release
          body: VyOS equuleus Branch
          draft: false
          prerelease: false
          files: |
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.pmx.no_cloudinit.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.pmx.cloudinit.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.pmx.no_cloudinit.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.pmx.cloudinit.qcow2
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.qemu.vultr.img
            vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.nat64.qemu.vultr.img
